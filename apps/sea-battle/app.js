// =============================
// –ú–æ—Ä—Å–∫–æ–π –±–æ–π –ú–æ–¥–µ–Ω–æ–≤–∞ (Vanilla JS)
// =============================

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const SIZE = 10; // —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 10—Ö10
// –§–ª–æ—Ç –ø–æ –∫–ª–∞—Å—Å–∏–∫–µ: 1x4, 2x3, 3x2, 4x1
const FLEET_CONFIG = [4,3,3,2,2,2,1,1,1,1];

// –≠–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–∫–∏
const EMOJI = {
  water: "üü¶",
  ship: "üö¢",   // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞
  miss: "‚ö™",
  hit: "üí•",
  sunk: "‚ò†Ô∏è"
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const state = {
  phase: "setup", // "setup" | "battle" | "over"
  turn: "player", // "player" | "ai"
  orientation: "H", // "H"orizontal | "V"ertical

  player: {
    grid: null, // –º–∞—Ç—Ä–∏—Ü–∞ –∫–ª–µ—Ç–æ–∫
    ships: [],
  },
  ai: {
    grid: null,
    ships: [],
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
  aiSkill: {
    // –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –ò–ò —Å–¥–µ–ª–∞–µ—Ç "—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª" (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª –∏–¥–µ–∞–ª—å–Ω—ã–º –æ—Ö–æ—Ç–Ω–∏–∫–æ–º)
    randomShotChance: 0.30,
    // –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞
    shotDelayMs: 550,
  },

  // –ü–∞–º—è—Ç—å –ò–ò –¥–ª—è –æ—Ö–æ—Ç—ã –ø–æ –ø–æ–ø–∞–¥–∞–Ω–∏—é
  aiMemory: {
    targets: [], // –æ—á–µ—Ä–µ–¥—å –∫–ª–µ—Ç–æ–∫-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ä—è–¥–æ–º —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º)
    tried: new Set(), // —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ "r,c" —É–∂–µ –æ–±—Å—Ç—Ä–µ–ª—è–Ω–Ω—ã—Ö
  }
};

// ========= –£–¢–ò–õ–ò–¢–´ =========
function makeEmptyGrid() {
  // –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ ‚Äî –æ–±—ä–µ–∫—Ç: { state: "empty"|"ship"|"hit"|"miss"|"sunk", shipId?: number }
  return Array.from({length: SIZE}, () =>
    Array.from({length: SIZE}, () => ({ state: "empty" }))
  );
}
function cloneGrid(grid) {
  return grid.map(row => row.map(cell => ({...cell})));
}
function inBounds(r, c) {
  return r >= 0 && r < SIZE && c >= 0 && c < SIZE;
}
function key(r,c) { return `${r},${c}`; }

function cellsAround(r, c) {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ 8 –∫–ª–µ—Ç–æ–∫ (–≤–∫–ª—é—á–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª–∏), –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä–∞–Ω–∏—Ü–∞–º.
  const deltas = [
    [-1,-1],[-1,0],[-1,1],
    [ 0,-1],       [ 0,1],
    [ 1,-1],[ 1,0],[ 1,1]
  ];
  return deltas.map(([dr,dc]) => [r+dr,c+dc]).filter(([rr,cc]) => inBounds(rr,cc));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤ (r,c) —Å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π orient, –±–µ–∑ –∫–∞—Å–∞–Ω–∏–π
function canPlace(grid, r, c, size, orient) {
  for (let i = 0; i < size; i++) {
    const rr = r + (orient === "V" ? i : 0);
    const cc = c + (orient === "H" ? i : 0);
    if (!inBounds(rr,cc)) return false;
    if (grid[rr][cc].state !== "empty") return false;
    // –ß—Ç–æ–±—ã –∫–æ—Ä–∞–±–ª–∏ –Ω–µ –∫–∞—Å–∞–ª–∏—Å—å –¥–∞–∂–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    const area = [[rr,cc], ...cellsAround(rr,cc)];
    for (const [ar, ac] of area) {
      if (grid[ar][ac].state === "ship") return false;
    }
  }
  return true;
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —Å–µ—Ç–∫–µ
function placeShip(grid, ships, r, c, size, orient) {
  const id = ships.length;
  const coords = [];
  for (let i = 0; i < size; i++) {
    const rr = r + (orient === "V" ? i : 0);
    const cc = c + (orient === "H" ? i : 0);
    grid[rr][cc] = { state: "ship", shipId: id };
    coords.push([rr,cc]);
  }
  ships.push({ id, size, coords, hits: 0, sunk: false });
}

// –°–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–æ—Ç–∞
function randomizeFleet() {
  const grid = makeEmptyGrid();
  const ships = [];
  for (const size of FLEET_CONFIG) {
    let placed = false;
    for (let tries = 0; tries < 2000 && !placed; tries++) {
      const orient = Math.random() < 0.5 ? "H" : "V";
      const r = Math.floor(Math.random() * SIZE);
      const c = Math.floor(Math.random() * SIZE);
      if (canPlace(grid, r, c, size, orient)) {
        placeShip(grid, ships, r, c, size, orient);
        placed = true;
      }
    }
    if (!placed) {
      // –ù–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å (—Ä–µ–¥–∫–æ, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è)
      return randomizeFleet();
    }
  }
  return { grid, ships };
}

// –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∞–±–ª—è -> –ø–æ—Ç–æ–ø–ª–µ–Ω?
function updateShipSunkStatus(board, ship) {
  ship.hits = ship.coords.reduce((acc, [r,c]) => acc + (board.grid[r][c].state === "hit" || board.grid[r][c].state === "sunk" ? 1 : 0), 0);
  if (!ship.sunk && ship.hits >= ship.size) {
    ship.sunk = true;
    // –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–æ—Ä–∞–±–ª—è –∫–∞–∫ sunk
    for (const [r,c] of ship.coords) {
      board.grid[r][c].state = "sunk";
    }
    return true; // —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Ç–æ–ø–∏–ª–∏
  }
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–π –ø–æ–±–µ–¥—ã (–≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω—ã)
function isAllSunk(ships) {
  return ships.every(s => s.sunk);
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–µ—Ç–∫–∏ –≤ —ç–º–æ–¥–∑–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
function emojiFor(cell, revealShips=false) {
  switch (cell.state) {
    case "empty": return EMOJI.water;
    case "ship": return revealShips ? EMOJI.ship : EMOJI.water;
    case "miss": return EMOJI.miss;
    case "hit": return EMOJI.hit;
    case "sunk": return EMOJI.sunk;
    default: return " ";
  }
}

// ========= –†–ï–ù–î–ï–†–ò–ù–ì =========
const els = {
  playerBoard: document.getElementById("playerBoard"),
  aiBoard: document.getElementById("aiBoard"),
  phaseBadge: document.getElementById("phaseBadge"),
  turnBadge: document.getElementById("turnBadge"),
  remaining: document.getElementById("remaining"),
  rotateBtn: document.getElementById("rotateBtn"),
  autoPlaceBtn: document.getElementById("autoPlaceBtn"),
  clearBtn: document.getElementById("clearBtn"),
  startBtn: document.getElementById("startBtn"),
  newGameBtn: document.getElementById("newGameBtn"),
  log: document.getElementById("log"),
  rulesBtn: document.getElementById("rulesBtn"),
  rulesModal: document.getElementById("rulesModal"),
  rulesClose: document.getElementById("rulesClose"),
  rulesOk: document.getElementById("rulesOk"),
  themeBtn: document.getElementById("themeBtn")
};

function renderBoard(boardEl, board, isPlayer=false) {
  // –û—á–∏—Å—Ç–∏—Ç—å
  boardEl.innerHTML = "";
  for (let r = 0; r < SIZE; r++) {
    for (let c = 0; c < SIZE; c++) {
      const cell = board.grid[r][c];
      const btn = document.createElement("button");
      btn.className = "cell";
      btn.dataset.r = r;
      btn.dataset.c = c;
      btn.setAttribute("aria-label", `–ö–ª–µ—Ç–∫–∞ ${r+1}:${c+1}`);

      // –ù–∞ –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞ –∫–æ—Ä–∞–±–ª–∏ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã; –Ω–∞ –ø–æ–ª–µ –ò–ò ‚Äî —Å–∫—Ä—ã—Ç—ã –¥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è
      const reveal = isPlayer || (cell.state !== "ship");
      btn.textContent = emojiFor(cell, reveal);

      // –°–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ñ–∞–∑—ã
      if (isPlayer) {
        if (state.phase === "setup") {
          btn.addEventListener("click", onPlayerCellClickSetup);
        } else {
          // –í–æ –≤—Ä–µ–º—è –±–æ—è ‚Äî –∫–ª–∏–∫–∏ –ø–æ —Å–≤–æ–µ–º—É –ø–æ–ª—é –Ω–µ –Ω—É–∂–Ω—ã
          btn.disabled = true;
        }
      } else {
        // –ü–æ–ª–µ –ò–ò: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –±–æ—è –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞—à —Ö–æ–¥
        btn.disabled = !(state.phase === "battle" && state.turn === "player");
        if (!btn.disabled) {
          btn.addEventListener("click", onAiCellClickBattle);
        }
      }
      boardEl.appendChild(btn);
    }
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç "–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å"
function renderRemaining() {
  if (state.phase !== "setup") {
    els.remaining.textContent = "";
    return;
  }
  const counts = countRemainingShipsToPlace();
  const parts = [];
  if (counts[4]) parts.push(`4‚Äë–ø–∞–ª—É–±–Ω—ã–π √ó${counts[4]}`);
  if (counts[3]) parts.push(`3‚Äë–ø–∞–ª—É–±–Ω—ã–π √ó${counts[3]}`);
  if (counts[2]) parts.push(`2‚Äë–ø–∞–ª—É–±–Ω—ã–π √ó${counts[2]}`);
  if (counts[1]) parts.push(`1‚Äë–ø–∞–ª—É–±–Ω—ã–π √ó${counts[1]}`);
  els.remaining.textContent = parts.length ? ("–û—Å—Ç–∞–ª–æ—Å—å: " + parts.join(", ")) : "–§–ª–æ—Ç –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª";
}

// ========= –ü–û–î–ì–û–¢–û–í–ö–ê –§–õ–û–¢–ê –ò–ì–†–û–ö–ê =========
function currentUnplacedSize() {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ—Ä–∞–±–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å (–ø–æ –ø–æ—Ä—è–¥–∫—É FLEET_CONFIG)
  const placedCounts = state.player.ships.length;
  if (placedCounts >= FLEET_CONFIG.length) return null;
  return FLEET_CONFIG[placedCounts];
}
function countRemainingShipsToPlace() {
  const remain = {...{1:0,2:0,3:0,4:0}};
  for (const s of FLEET_CONFIG) {
    remain[s]++;
  }
  for (const _ of state.player.ships) {
    const size = FLEET_CONFIG[state.player.ships.length - (_ ? 1 : 1)]; // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  }
  // –ë–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –ø–æ—Å—á–∏—Ç–∞—Ç—å —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–∞–º
  const placedSizes = state.player.ships.map(s => s.size);
  for (const sz of placedSizes) {
    remain[sz]--;
  }
  return remain;
}

function onPlayerCellClickSetup(e) {
  const r = +e.currentTarget.dataset.r;
  const c = +e.currentTarget.dataset.c;

  const cell = state.player.grid[r][c];
  // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —É–∂–µ —Å—Ç–æ—è—â–µ–º—É –∫–æ—Ä–∞–±–ª—é ‚Äî —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª–∏–∫–æ–º —ç—Ç–æ—Ç –∫–æ—Ä–∞–±–ª—å
  if (cell.state === "ship" && typeof cell.shipId === "number") {
    removeShip(state.player, cell.shipId);
    renderAll();
    return;
  }

  const size = currentUnplacedSize();
  if (!size) {
    toast("–§–ª–æ—Ç —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω.");
    return;
  }
  if (canPlace(state.player.grid, r, c, size, state.orientation)) {
    placeShip(state.player.grid, state.player.ships, r, c, size, state.orientation);
    renderAll();
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã, –µ—Å–ª–∏ –≤—Å—ë —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–æ
    if (state.player.ships.length === FLEET_CONFIG.length) {
      els.startBtn.disabled = false;
      els.phaseBadge.textContent = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
    }
  } else {
    toast("–°—é–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è (–≤—ã—Ö–æ–¥ –∑–∞ –ø–æ–ª–µ, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Å–∞–Ω–∏–µ).");
  }
}

function removeShip(board, shipId) {
  const ship = board.ships.find(s => s.id === shipId);
  if (!ship) return;
  for (const [r,c] of ship.coords) {
    board.grid[r][c] = { state: "empty" };
  }
  // –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—Ç–∏–º –∫–æ—Ä–∞–±–ª—å –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω—ã–π
  board.ships = board.ships.filter(s => s.id !== shipId);
  // –ù–æ shipId –≤ –∫–ª–µ—Ç–∫–∞—Ö –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
}

// ========= –ë–û–ô =========
function onAiCellClickBattle(e) {
  if (state.turn !== "player") return;
  const r = +e.currentTarget.dataset.r;
  const c = +e.currentTarget.dataset.c;
  const cell = state.ai.grid[r][c];

  if (cell.state === "miss" || cell.state === "hit" || cell.state === "sunk") {
    toast("–°—é–¥–∞ —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏.");
    return;
  }

  // –ü–æ–ø–∞–¥–∞–Ω–∏–µ?
  if (cell.state === "ship") {
    cell.state = "hit";
    const ship = state.ai.ships[cell.shipId];
    const sunkNow = updateShipSunkStatus(state.ai, ship);
    renderAll();

    if (sunkNow) toast("–ï—Å—Ç—å! –ö–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ—Ç–æ–ø–ª–µ–Ω ‚ò†Ô∏è");
    else toast("–ü–æ–ø–∞–¥–∞–Ω–∏–µ üí•");

    if (isAllSunk(state.ai.ships)) {
      endGame("win");
      return;
    }
  } else {
    // –ü—Ä–æ–º–∞—Ö
    state.ai.grid[r][c].state = "miss";
    toast("–ü—Ä–æ–º–∞—Ö ‚ö™");
    state.turn = "ai";
    updateBadges();
    renderAll();
    // –•–æ–¥ –ò–ò —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    setTimeout(aiTurn, state.aiSkill.shotDelayMs);
    return;
  }

  // –ü–æ –∫–ª–∞—Å—Å–∏–∫–µ ‚Äî 1 –≤—ã—Å—Ç—Ä–µ–ª –≤ —Ö–æ–¥, –¥–∞–∂–µ –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏
  state.turn = "ai";
  updateBadges();
  setTimeout(aiTurn, state.aiSkill.shotDelayMs);
}

function aiTurn() {
  if (state.phase !== "battle") return;

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ (–µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–æ –ø–æ–ø–∞–¥–∞–Ω–∏–µ)
  const { targets, tried } = state.aiMemory;

  let targetCell = null;

  // –ò–Ω–æ–≥–¥–∞ (randomShotChance) –ò–ò –¥–µ–ª–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã—Å—Ç—Ä–µ–ª,
  // —á—Ç–æ–±—ã –Ω–µ –∫–∞–∑–∞—Ç—å—Å—è ¬´–ø—Ä–æ–∑–æ—Ä–ª–∏–≤—ã–º¬ª –∏ –Ω–µ –≤—ã–Ω–æ—Å–∏—Ç—å —Ñ–ª–æ—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.
  const makeRandom = Math.random() < state.aiSkill.randomShotChance || targets.length === 0;

  if (!makeRandom && targets.length) {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    targetCell = targets.shift();
  } else {
    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ—Å—Ç—Ä–µ–ª—è–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    const candidates = [];
    for (let r = 0; r < SIZE; r++) {
      for (let c = 0; c < SIZE; c++) {
        const k = key(r,c);
        if (!tried.has(k) && state.player.grid[r][c].state !== "hit" && state.player.grid[r][c].state !== "miss" && state.player.grid[r][c].state !== "sunk") {
          candidates.push([r,c]);
        }
      }
    }
    if (candidates.length === 0) return; // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    targetCell = candidates[Math.floor(Math.random() * candidates.length)];
  }

  const [r, c] = targetCell;
  const k = key(r,c);
  tried.add(k);

  const cell = state.player.grid[r][c];

  if (cell.state === "ship") {
    // –ü–æ–ø–∞–¥–∞–Ω–∏–µ
    cell.state = "hit";
    const ship = state.player.ships[cell.shipId];
    const sunkNow = updateShipSunkStatus(state.player, ship);

    // –ï—Å–ª–∏ –Ω–µ –ø–æ—Ç–æ–ø–∏–ª–∏, –¥–æ–±–∞–≤–∏–º —Å–æ—Å–µ–¥–µ–π –∫–∞–∫ —Ü–µ–ª–∏ (–≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥/–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)
    if (!sunkNow) {
      const nextTargets = [[r-1,c],[r+1,c],[r,c-1],[r,c+1]].filter(([rr,cc]) => (
        inBounds(rr,cc) && !state.aiMemory.tried.has(key(rr,cc))
      ));
      // –ü–µ—Ä–µ–º–µ—à–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ (—á—Ç–æ–±—ã ¬´–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏¬ª –±—ã–ª–∏ —Ä–∞–∑–Ω—ã–º–∏)
      shuffle(nextTargets);
      state.aiMemory.targets.push(...nextTargets);
      toast("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–ø–∞–ª –ø–æ –≤–∞—à–µ–º—É –∫–æ—Ä–∞–±–ª—é üí•");
    } else {
      // –ü—Ä–∏ –ø–æ—Ç–æ–ø–ª–µ–Ω–∏–∏ ‚Äî –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ü–µ–ª–µ–π, —á—Ç–æ–± –ò–ò ¬´–ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–ª¬ª –æ—Ö–æ—Ç—É
      state.aiMemory.targets.length = 0;
      toast("–û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∫–æ—Ä–∞–±–ª—å –ø–æ—Ç–æ–ø–ª–µ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º ‚ò†Ô∏è");
    }

    renderAll();
    if (isAllSunk(state.player.ships)) {
      endGame("lose");
      return;
    }
  } else {
    // –ü—Ä–æ–º–∞—Ö
    state.player.grid[r][c].state = "miss";
    toast("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è ‚ö™");
    renderAll();
  }

  // –•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤–∞–º
  state.turn = "player";
  updateBadges();
}

// –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞
function shuffle(arr) {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [arr[i], arr[j]] = [arr[j], arr[i]];
  }
}

// ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï =========
function resetAll(newRandom = true) {
  state.phase = "setup";
  state.turn = "player";
  state.orientation = "H";
  state.aiMemory.targets = [];
  state.aiMemory.tried = new Set();
  els.startBtn.disabled = true;
  els.turnBadge.classList.add("hidden");
  els.phaseBadge.textContent = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Ä–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Ñ–ª–æ—Ç";

  // –ü–æ–ª–µ –∏–≥—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–µ, –∫–æ—Ä–∞–±–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
  state.player.grid = makeEmptyGrid();
  state.player.ships = [];

  // –ü–æ–ª–µ –ò–ò –≤—Å–µ–≥–¥–∞ —Å–ª—É—á–∞–π–Ω–æ–µ
  if (newRandom) {
    const ai = randomizeFleet();
    state.ai.grid = ai.grid;
    state.ai.ships = ai.ships;
  } else {
    // –ù–∞ —Å–ª—É—á–∞–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ —Å–º–µ–Ω—ã —Ñ–ª–æ—Ç–∏–ª–∏–∏ –ò–ò (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  }

  renderAll();
  renderRemaining();
}

function startBattle() {
  if (state.player.ships.length !== FLEET_CONFIG.length) {
    toast("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—Ç–∞–≤—å—Ç–µ –≤–µ—Å—å —Ñ–ª–æ—Ç.");
    return;
  }
  state.phase = "battle";
  els.phaseBadge.textContent = "–ë–æ–π –Ω–∞—á–∞–ª—Å—è";
  els.turnBadge.classList.remove("hidden");
  updateBadges();
  renderAll();
  toast("–í–∞—à —Ö–æ–¥. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –ø–æ–ª—é.");
}

function updateBadges() {
  els.turnBadge.textContent = state.turn === "player" ? "–í–∞—à —Ö–æ–¥" : "–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞";
  // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –∫–Ω–æ–ø–æ–∫ –∫–ª–∏–∫–∞ –ø–æ AI-–ø–æ–ª—é (–∞–∫—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—à–µ–º —Ö–æ–¥—É)
  renderBoard(els.aiBoard, {grid: state.ai.grid}, false);
}

function renderAll() {
  renderBoard(els.playerBoard, {grid: state.player.grid}, true);
  renderBoard(els.aiBoard, {grid: state.ai.grid}, false);
  renderRemaining();
  updateYear();
}

function toast(message) {
  els.log.textContent = message;
}

// –ö–Ω–æ–ø–∫–∏
els.rotateBtn.addEventListener("click", () => {
  state.orientation = state.orientation === "H" ? "V" : "H";
  els.rotateBtn.textContent = state.orientation === "H" ? "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ ‚ü∑" : "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ ‚Üï";
  toast(state.orientation === "H" ? "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏" : "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏");
});
els.autoPlaceBtn.addEventListener("click", () => {
  // –°–ª—É—á–∞–π–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–æ–ª–µ –∏–≥—Ä–æ–∫–∞
  const rnd = randomizeFleet();
  state.player.grid = rnd.grid;
  state.player.ships = rnd.ships;
  els.startBtn.disabled = false;
  els.phaseBadge.textContent = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
  renderAll();
  toast("–§–ª–æ—Ç —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.");
});
els.clearBtn.addEventListener("click", () => {
  state.player.grid = makeEmptyGrid();
  state.player.ships = [];
  els.startBtn.disabled = true;
  els.phaseBadge.textContent = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Ä–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Ñ–ª–æ—Ç";
  renderAll();
  toast("–ü–æ–ª–µ –æ—á–∏—â–µ–Ω–æ.");
});
els.startBtn.addEventListener("click", startBattle);
els.newGameBtn.addEventListener("click", () => resetAll(true));

// –ú–æ–¥–∞–ª ¬´–ü—Ä–∞–≤–∏–ª–∞¬ª
function openRules() {
  els.rulesModal.setAttribute("aria-hidden", "false");
}
function closeRules() {
  els.rulesModal.setAttribute("aria-hidden", "true");
}
els.rulesBtn.addEventListener("click", openRules);
els.rulesClose.addEventListener("click", closeRules);
els.rulesOk.addEventListener("click", closeRules);
els.rulesModal.addEventListener("click", (e) => {
  if (e.target.dataset.close === "true") closeRules();
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥–æ–¥ –≤ —Ñ—É—Ç–µ—Ä–µ
function updateYear() {
  const y = new Date().getFullYear();
  const el = document.getElementById("year");
  if (el) el.textContent = String(y);
}

// –¢—ë–º–Ω–∞—è —Ç–µ–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ¬´–æ—Ç –∑–∞–∫–∞—Ç–∞ –¥–æ —Ä–∞—Å—Å–≤–µ—Ç–∞¬ª (–ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ)
// ‚Äî –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.
// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞; –Ω–æ—á—å—é (21:00‚Äì06:59) ‚Äî —Ç—ë–º–Ω–∞—è.
function isNight() {
  const h = new Date().getHours();
  return (h >= 21 || h < 7);
}
function applyTheme(auto = true) {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é —Ç—Ä–æ–≥–∞–µ—Ç —Ç–µ–º—É ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ localStorage
  const manual = localStorage.getItem("seaBattleTheme");
  let dark = false;
  if (manual === "dark") dark = true;
  else if (manual === "light") dark = false;
  else dark = isNight(); // –∞–≤—Ç–æ
  document.documentElement.classList.toggle("dark", dark);
}
applyTheme(true);

// –ü–æ–∑–≤–æ–ª–∏–º –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–æ—á—å—é —Ö–æ—á–µ—Ç—Å—è —Å–≤–µ—Ç–ª—É—é –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
els.themeBtn.addEventListener("click", () => {
  const currentlyDark = document.documentElement.classList.contains("dark");
  const next = !currentlyDark;
  document.documentElement.classList.toggle("dark", next);
  localStorage.setItem("seaBattleTheme", next ? "dark" : "light");
});

// –ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ —Ç–µ–º—ã —Ä–∞–∑ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (–≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –≤–∫–ª–∞–¥–∫—É –æ—Ç–∫—Ä—ã—Ç–æ–π –∏ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ —Å–º–µ–Ω–∏–ª–æ—Å—å)
setInterval(() => {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –≤—Ä—É—á–Ω—É—é ‚Äî –æ–±–Ω–æ–≤–∏–º –∞–≤—Ç–æ-—Ä–µ–∂–∏–º
  const manual = localStorage.getItem("seaBattleTheme");
  if (!manual) applyTheme(true);
}, 5 * 60 * 1000);

// ==== –°–¢–ê–†–¢ ====
resetAll(true);

// –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–ª–∏–∫—É –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
// –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –∫–ª–µ—Ç–∫–∞—Ö –¥–ª—è —ç—Å—Ç–µ—Ç–∏–∫–∏
document.addEventListener("contextmenu", (e) => {
  if (e.target && e.target.classList && e.target.classList.contains("cell")) {
    e.preventDefault();
  }
});

